# 
# Wick HTML Parser file
# 

@NAME CandleFW_HTML_Parser

@EXT html

@IGNORE g:ws g:nl 

@IMPORT ./string.hcg as string

##############################################################################################
##############################################################################################
#### HTML / ML
##############################################################################################
##############################################################################################
    
<> HTML > RESULT

<> RESULT > DTD(*) BODY                                                                     
                                                                f:r { $sym2.DTD = $sym1, $sym2 }

<> BODY > GOAL_TAG

<> GOAL_TAG > TAG

<> TAG > < TAGNAME ATTRIBUTES? > TAG_BODY? </ TAGNAME >                                     
                                        f:r { { type:env.typ["HTML_"+$sym2.toUpperCase()] || env.typ.HTML_Element, tag:$sym2.toUpperCase(), attributes:$$sym3 || [], nodes:$sym5 || [], VOID:false, pos } }
    | < TAGNAME ATTRIBUTES? / >                                                             
                                        f:r { { type:env.typ["HTML_"+$sym2.toUpperCase()] || env.typ.HTML_Element, tag:$sym2.toUpperCase(), attributes:$$sym3 || [], nodes:[], VOID:false, pos } }
    | < VOID_NAME ATTRIBUTES? /? >                                                          
                                        f:r { { type:env.typ["HTML_"+$sym2.toUpperCase()] || env.typ.HTML_Element, tag:$sym2.toUpperCase(), attributes:$$sym3 || [], nodes:[], VOID:true, pos } }
    
<> DTD > \<! g:id? \-- ?  TEXT_NODE_DATA  \-- ? \>                                                 
                                                                f:r { { type:"DTD", tag:$$sym2|| "", value:$$sym4 }  }                


###########################################################################################
# https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#syntax-elements
###########################################################################################

<> VOID_NAME > τinput
    | τarea
    | τbase
    | τbr
    | τcol
    | τcommand
    | τembed
    | τhr
    | τimg
    | τkeygen
    | τlink
    | τmeta
    | τparam
    | τsource
    | τtrack
    | τwbr

<> TAG_BODY > TAG_BODY_ITEM(+)

<> TAG_BODY_ITEM > TEXT_NODE                        
    | TAG
    | DTD                                                                                                                            
    
<> ATTRIBUTES > ATTRIBUTE(+)                                    

<> ATTRIBUTE > ATTRIBUTE_HEAD \= ATTRIBUTE_BODY                                                  
                                                                f:r { {type:env.typ.HTMLAttribute, name:$1, value:$3, IS_BINDING:false, pos } }
    | ATTRIBUTE_HEAD                                                                            
                                                                f:r { {type:env.typ.HTMLAttribute, name:$1, value:"", IS_BINDING:false, pos } }

<> ATTRIBUTE_HEAD > ' identifier? '                                                             
                                                                f:r { $2 }
    | " identifier? "                                                                           
                                                                f:r { $2 }
    | identifier

<> ATTRIBUTE_BODY > \" BODY_SYMBOLS(*\" ) \"                                                      
                                                                f:r { $2 || "" }
    | \' BODY_SYMBOLS(*\" ) \''                                                                   
                                                                f:r { $2 || "" }
    | identifier
    | g:num                                          

<> TAGNAME > (RED g:nl) identifier


<> identifier > g:id ( g:id | \- | \: | g:num )(*\" )                                  			
                                                                f:r { $sym1 + $sym2 } 

<> TEXT_NODE > TEXT_NODE_DATA                                                                   
                                                                f:r { {type:env.typ.HTMLText, data:$sym1, IS_BINDING:false, pos } }
<> TEXT_NODE_DATA > BODY_SYMBOLS(+\" )                                                            
 
<> BODY_SYMBOLS > g:id 
    | g:nl 
    | g:ws 
    | g:sym 
    | g:num 
    | \! 
    | \( 





